<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>متجر الألعاب - بيع وشراء حسابات</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;700;900&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Tajawal', sans-serif;
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }
        .body-overlay::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(17, 24, 39, 0.8); /* bg-gray-900 with opacity */
            z-index: -1;
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #2d3748; /* gray-800 */
        }
        ::-webkit-scrollbar-thumb {
            background: #4a5568; /* gray-600 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #718096; /* gray-500 */
        }
    </style>
</head>
<body id="site-body" class="bg-gray-900 text-white">
    <div id="body-overlay-container"></div>
    <div class="min-h-screen flex flex-col items-center p-4 sm:p-8 relative z-10">
        <!-- Header -->
        <header class="w-full max-w-5xl text-center py-6 flex flex-col items-center">
            <img id="site-logo" src="" alt="Site Logo" class="h-20 w-20 mb-4 hidden rounded-full object-cover">
            <h1 id="site-title" class="text-4xl sm:text-6xl font-extrabold text-white animate-pulse">متجر الألعاب</h1>
            <p id="site-subtitle" class="text-gray-400 mt-2 text-lg sm:text-xl">بيع وشراء حسابات الألعاب</p>
            <div id="user-id-container" class="mt-4 text-sm text-gray-500 hidden">
                معرّف المستخدم الخاص بك: <span id="user-id" class="font-mono text-gray-300 break-all"></span>
            </div>
        </header>
      
        <!-- Loading & Error States -->
        <div id="loading-indicator" class="flex flex-col items-center justify-center p-8">
            <div class="w-12 h-12 border-4 border-t-4 border-gray-600 rounded-full animate-spin"></div>
            <p class="mt-4 text-gray-400">جاري التحميل...</p>
        </div>
        <div id="error-message" class="bg-red-500 text-white p-4 rounded-lg shadow-md max-w-lg text-center hidden"></div>

        <!-- Main Content -->
        <main id="main-content" class="w-full max-w-5xl mt-8 space-y-12 hidden">
            <nav class="bg-gray-800 p-2 rounded-full shadow-lg flex justify-center space-x-2 sm:space-x-4">
                <button id="nav-store" class="py-2 px-4 sm:px-6 rounded-full text-white font-bold transition-colors duration-200 bg-indigo-600">المتجر</button>
                <button id="nav-wishlist" class="py-2 px-4 sm:px-6 rounded-full text-white font-bold transition-colors duration-200">
                    قائمة الأمنيات (<span id="wishlist-count">0</span>)
                </button>
                <button id="nav-admin" class="py-2 px-4 sm:px-6 rounded-full text-white font-bold transition-colors duration-200 hidden">لوحة الإدارة</button>
            </nav>

            <!-- Store View -->
            <section id="store-view">
                <h2 class="text-3xl font-bold text-gray-100 mb-6 text-center">جميع الألعاب المتاحة</h2>
                <div id="products-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Products will be injected here by JavaScript -->
                </div>
            </section>

            <!-- Wishlist View -->
            <section id="wishlist-view" class="hidden">
                <h2 class="text-3xl font-bold text-gray-100 mb-6 text-center">قائمة أمنياتك</h2>
                <div id="wishlist-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Wishlist items will be injected here by JavaScript -->
                </div>
            </section>
        
            <!-- Admin View -->
            <section id="admin-view" class="hidden">
                <h2 class="text-3xl font-bold text-gray-100 mb-6 text-center">لوحة الإدارة</h2>
                <div class="space-y-8 max-w-2xl mx-auto">
                    <!-- Add Product -->
                    <div class="bg-gray-800 p-6 rounded-xl shadow-lg space-y-4">
                        <h3 class="text-2xl font-semibold text-gray-100">إضافة لعبة جديدة</h3>
                        <input id="nameInput" type="text" placeholder="اسم اللعبة" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <input id="priceInput" type="number" placeholder="السعر" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <input id="imageUrlInput" type="text" placeholder="رابط الصورة (URL)" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <button id="generateImageBtn" class="bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition-colors duration-200 hover:bg-blue-700">
                            انشئ صورة ✨
                        </button>
                        <textarea id="descriptionInput" placeholder="وصف اللعبة" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 h-24 resize-none focus:outline-none focus:ring-2 focus:ring-indigo-500"></textarea>
                        <div class="flex justify-end space-x-2">
                            <button id="generateDescriptionBtn" class="bg-purple-600 text-white font-bold py-2 px-6 rounded-lg transition-colors duration-200 hover:bg-purple-700">
                                انشئ وصف ✨
                            </button>
                            <button id="saveProductBtn" class="bg-green-600 text-white font-bold py-2 px-6 rounded-lg transition-colors duration-200 hover:bg-green-700">
                                حفظ اللعبة
                            </button>
                        </div>
                    </div>

                    <!-- Site Customization -->
                    <div class="bg-gray-800 p-6 rounded-xl shadow-lg space-y-4">
                        <h3 class="text-2xl font-semibold text-gray-100">تخصيص الموقع</h3>
                        <input id="siteTitleInput" type="text" placeholder="عنوان الموقع الرئيسي" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <input id="siteSubtitleInput" type="text" placeholder="العنوان الفرعي للموقع" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <input id="logoUrlInput" type="text" placeholder="رابط لوقو الموقع (URL)" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <input id="backgroundUrlInput" type="text" placeholder="رابط خلفية الموقع (URL)" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <h4 class="text-lg font-semibold text-gray-200 pt-2">تعديل أسماء القائمة</h4>
                        <input id="navStoreNameInput" type="text" placeholder="اسم زر المتجر" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <input id="navWishlistNameInput" type="text" placeholder="اسم زر قائمة الأمنيات" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                         <input id="navAdminNameInput" type="text" placeholder="اسم زر لوحة الإدارة" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <div class="flex justify-end">
                            <button id="saveSiteSettingsBtn" class="bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition-colors duration-200 hover:bg-blue-700">حفظ التغييرات</button>
                        </div>
                    </div>
              
                    <!-- Manage Products -->
                    <div class="bg-gray-800 p-6 rounded-xl shadow-lg space-y-4">
                        <h3 class="text-2xl font-semibold text-gray-100">إدارة الألعاب</h3>
                        <div id="manage-products-container" class="space-y-2">
                            <!-- Admin product list will be injected here -->
                        </div>
                    </div>

                    <!-- Manage Payment Methods -->
                    <div class="bg-gray-800 p-6 rounded-xl shadow-lg space-y-4">
                        <h3 class="text-2xl font-semibold text-gray-100">إدارة طرق الدفع</h3>
                        <div id="payment-methods-admin-container" class="space-y-2">
                            <!-- Admin payment methods list -->
                        </div>
                        <h4 class="text-lg font-semibold text-gray-200 pt-2">إضافة طريقة دفع جديدة</h4>
                        <div class="flex space-x-2">
                            <input id="paymentMethodNameInput" type="text" placeholder="اسم الطريقة (مثال: كليك)" class="w-1/2 p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                            <input id="paymentMethodValueInput" type="text" placeholder="الرقم أو الحساب" class="w-1/2 p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        </div>
                         <input id="whatsappInput" type="text" placeholder="رقم الواتس اب (مع رمز الدولة)" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <div class="flex justify-end space-x-2">
                             <button id="addPaymentMethodBtn" class="bg-green-500 text-white font-bold py-2 px-4 rounded-lg">إضافة</button>
                             <button id="savePaymentMethodsBtn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">حفظ رقم الواتس</button>
                        </div>
                    </div>
                </div>
            </section>
        </main>

        <!-- Footer -->
        <footer id="footer" class="w-full max-w-5xl mt-12 py-6 text-center text-gray-500 border-t border-gray-800 hidden">
            <p class="text-lg font-bold text-gray-300 mb-2">معلومات الدفع</p>
            <div id="payment-methods-footer-container">
                <!-- Payment methods will be injected here -->
            </div>
        </footer>

        <!-- WhatsApp Floating Button -->
        <a id="whatsapp-btn" href="#" target="_blank" class="fixed bottom-6 right-6 bg-green-500 text-white w-16 h-16 rounded-full flex items-center justify-center shadow-lg transform transition-transform hover:scale-110 hidden">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-8 h-8" viewBox="0 0 24 24" fill="currentColor"><path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.487 5.235 3.487 8.413 0 6.557-5.338 11.892-11.894 11.892-1.99 0-3.903-.52-5.613-1.476l-6.238 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.886-.001 2.267.655 4.398 1.908 6.166l-.253 1.018 1.023-.252zm7.49-6.201c-.37-.187-2.19-1.082-2.53-1.207-.34-.125-.582-.187-.825.187-.243.375-.957 1.207-.957 1.207-.224.25-.448.281-.824.093-.375-.187-1.575-.582-3.003-1.855-1.109-.968-1.857-2.173-2.08-2.548-.225-.375-.015-.582.171-.77.171-.171.375-.448.563-.66.187-.219.25-.375.375-.618.125-.25.063-.469-.031-.656-.094-.187-.825-1.984-.825-1.984-.281-.678-.563-.582-.781-.582h-.219c-.219 0-.563.094-.859.375-.297.281-1.125 1.109-1.125 2.703 0 1.594 1.156 3.125 1.313 3.344.156.219 2.281 3.656 5.531 4.875 3.25 1.219 3.25 1.219.907.828.625.094 1.969-.828 2.25-1.594.281-.766.281-1.422.188-1.594-.094-.172-.313-.281-.688-.469z"/></svg>
        </a>

        <!-- Modal for alerts -->
        <div id="modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center hidden z-50">
            <div class="bg-gray-800 p-8 rounded-lg shadow-xl max-w-sm w-full border border-gray-700">
                <h3 id="modal-title" class="text-xl font-bold mb-4 text-gray-100"></h3>
                <p id="modal-content" class="text-gray-400 mb-6"></p>
                <div class="flex justify-start">
                    <button id="modal-close-btn" class="bg-indigo-600 text-white font-medium py-2 px-4 rounded-full hover:bg-indigo-700 transition duration-300">إغلاق</button>
                </div>
            </div>
        </div>
    </div>

    <script type="module">
        // Firebase Imports
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithCustomToken, signInAnonymously } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, doc, setDoc, query, where, getDocs, deleteDoc, Timestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- STATE MANAGEMENT ---
        let db, auth, userId, appId;
        let products = [];
        let comments = [];
        let wishlistItems = [];
        let siteConfig = {
            siteTitle: 'متجر الألعاب',
            siteSubtitle: 'بيع وشراء حسابات الألعاب',
            logoUrl: '',
            backgroundUrl: '',
            navNames: {
                store: 'المتجر',
                wishlist: 'قائمة الأمنيات',
                admin: 'لوحة الإدارة'
            },
            paymentMethods: [],
            whatsapp: ''
        };
        let activeView = 'store';
        const adminUid = '18382536631674206939'; // Admin UID for demo purposes

        // --- DOM ELEMENT REFERENCES ---
        // General UI
        const loadingIndicator = document.getElementById('loading-indicator');
        const errorMessage = document.getElementById('error-message');
        const mainContent = document.getElementById('main-content');
        const footer = document.getElementById('footer');
        const userIdContainer = document.getElementById('user-id-container');
        const userIdSpan = document.getElementById('user-id');
        const siteBody = document.getElementById('site-body');
        const bodyOverlayContainer = document.getElementById('body-overlay-container');

        // Header
        const siteLogo = document.getElementById('site-logo');
        const siteTitle = document.getElementById('site-title');
        const siteSubtitle = document.getElementById('site-subtitle');

        // Navigation
        const navStoreBtn = document.getElementById('nav-store');
        const navWishlistBtn = document.getElementById('nav-wishlist');
        const navAdminBtn = document.getElementById('nav-admin');
        const wishlistCountSpan = document.getElementById('wishlist-count');

        // Views
        const storeView = document.getElementById('store-view');
        const wishlistView = document.getElementById('wishlist-view');
        const adminView = document.getElementById('admin-view');

        // Containers
        const productsContainer = document.getElementById('products-container');
        const wishlistContainer = document.getElementById('wishlist-container');
        const manageProductsContainer = document.getElementById('manage-products-container');
        const paymentMethodsAdminContainer = document.getElementById('payment-methods-admin-container');
        const paymentMethodsFooterContainer = document.getElementById('payment-methods-footer-container');

        // Admin: Add Product
        const nameInput = document.getElementById('nameInput');
        const priceInput = document.getElementById('priceInput');
        const imageUrlInput = document.getElementById('imageUrlInput');
        const descriptionInput = document.getElementById('descriptionInput');
        const generateImageBtn = document.getElementById('generateImageBtn');
        const generateDescriptionBtn = document.getElementById('generateDescriptionBtn');
        const saveProductBtn = document.getElementById('saveProductBtn');
        
        // Admin: Site Customization
        const siteTitleInput = document.getElementById('siteTitleInput');
        const siteSubtitleInput = document.getElementById('siteSubtitleInput');
        const logoUrlInput = document.getElementById('logoUrlInput');
        const backgroundUrlInput = document.getElementById('backgroundUrlInput');
        const navStoreNameInput = document.getElementById('navStoreNameInput');
        const navWishlistNameInput = document.getElementById('navWishlistNameInput');
        const navAdminNameInput = document.getElementById('navAdminNameInput');
        const saveSiteSettingsBtn = document.getElementById('saveSiteSettingsBtn');

        // Admin: Payment Methods
        const paymentMethodNameInput = document.getElementById('paymentMethodNameInput');
        const paymentMethodValueInput = document.getElementById('paymentMethodValueInput');
        const whatsappInput = document.getElementById('whatsappInput');
        const addPaymentMethodBtn = document.getElementById('addPaymentMethodBtn');
        const savePaymentMethodsBtn = document.getElementById('savePaymentMethodsBtn');

        // Contact
        const whatsappBtn = document.getElementById('whatsapp-btn');

        // --- INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', initializeFirebase);

        async function initializeFirebase() {
            try {
                appId = typeof window.__app_id !== 'undefined' ? window.__app_id : 'default-app-id';
                const firebaseConfig = typeof window.__firebase_config !== 'undefined' ? JSON.parse(window.__firebase_config) : {};
                const initialAuthToken = typeof window.__initial_auth_token !== 'undefined' ? window.__initial_auth_token : null;

                if (!firebaseConfig.apiKey) throw new Error("Firebase config is missing.");

                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }
                
                userId = auth.currentUser?.uid;
                if(userId) {
                    userIdSpan.textContent = userId;
                    userIdContainer.classList.remove('hidden');
                    if (userId === adminUid) {
                        navAdminBtn.classList.remove('hidden');
                    }
                    setupFirestoreListeners(userId);
                }

                mainContent.classList.remove('hidden');
                footer.classList.remove('hidden');
                loadingIndicator.classList.add('hidden');
            } catch (e) {
                console.error('Firebase Initialization Error:', e);
                showError('حدث خطأ في الاتصال بالخادم. يرجى المحاولة لاحقاً.');
            }
        }
        
        function setupFirestoreListeners(uid) {
            // Products Listener
            onSnapshot(collection(db, `artifacts/${appId}/public/data/products`), (snapshot) => {
                products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAll();
            });

            // Comments Listener
            onSnapshot(collection(db, `artifacts/${appId}/public/data/comments`), (snapshot) => {
                comments = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAll();
            });

            // Wishlist Listener
            onSnapshot(collection(db, `artifacts/${appId}/users/${uid}/wishlist`), (snapshot) => {
                wishlistItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                wishlistCountSpan.textContent = wishlistItems.length;
                renderAll();
            });

            // Site Config Listener
            onSnapshot(doc(db, `artifacts/${appId}/public/data/settings/siteConfig`), (docSnap) => {
                if (docSnap.exists()) {
                    // Merge with defaults to avoid errors if some fields are missing
                    siteConfig = { ...siteConfig, ...docSnap.data() };
                }
                updateSiteUI();
            });
        }

        // --- UI UPDATE FUNCTIONS ---
        function updateSiteUI() {
            // Update Header
            siteTitle.textContent = siteConfig.siteTitle;
            siteSubtitle.textContent = siteConfig.siteSubtitle;
            if(siteConfig.logoUrl) {
                siteLogo.src = siteConfig.logoUrl;
                siteLogo.classList.remove('hidden');
            } else {
                siteLogo.classList.add('hidden');
            }

            // Update Background
            if(siteConfig.backgroundUrl) {
                siteBody.style.backgroundImage = `url('${siteConfig.backgroundUrl}')`;
                bodyOverlayContainer.className = 'body-overlay';
            } else {
                siteBody.style.backgroundImage = 'none';
                bodyOverlayContainer.className = '';
            }
            
            // Update Navigation
            navStoreBtn.textContent = siteConfig.navNames.store;
            // Keep the count span
            const currentCount = wishlistCountSpan.textContent;
            navWishlistBtn.innerHTML = `${siteConfig.navNames.wishlist} (<span id="wishlist-count">${currentCount}</span>)`;
            navAdminBtn.textContent = siteConfig.navNames.admin;

            // Update Footer Payment Info
            renderPaymentMethodsFooter();

            // Update WhatsApp Button
             if (siteConfig.whatsapp) {
                whatsappBtn.href = `https://wa.me/${siteConfig.whatsapp}?text=مرحباً، أود إرسال إثبات الدفع.`;
                whatsappBtn.classList.remove('hidden');
            } else {
                whatsappBtn.classList.add('hidden');
            }

            // Update Admin Panel Inputs with current values
            siteTitleInput.value = siteConfig.siteTitle;
            siteSubtitleInput.value = siteConfig.siteSubtitle;
            logoUrlInput.value = siteConfig.logoUrl;
            backgroundUrlInput.value = siteConfig.backgroundUrl;
            navStoreNameInput.value = siteConfig.navNames.store;
            navWishlistNameInput.value = siteConfig.navNames.wishlist;
            navAdminNameInput.value = siteConfig.navNames.admin;
            whatsappInput.value = siteConfig.whatsapp;
            renderPaymentMethodsAdmin();
        }

        // --- RENDER FUNCTIONS ---
        function renderAll() {
            switch(activeView) {
                case 'store':
                    renderProducts();
                    break;
                case 'wishlist':
                    renderWishlist();
                    break;
                case 'admin':
                    renderAdminProducts();
                    renderPaymentMethodsAdmin();
                    break;
            }
        }
        
        function renderProducts() {
            productsContainer.innerHTML = '';
            const productsWithComments = products.map(product => {
                const productComments = comments
                    .filter(comment => comment.productId === product.id)
                    .map(c => ({...c, timestamp: c.timestamp?.toDate()}))
                    .sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));
                return { ...product, comments: productComments };
            });

            if (productsWithComments.length === 0) {
                 productsContainer.innerHTML = `<p class="text-center text-gray-500 text-lg col-span-full">لا توجد ألعاب متوفرة حالياً.</p>`;
                 return;
            }

            productsWithComments.forEach(product => {
                const currency = new Intl.NumberFormat('ar-JO', { style: 'currency', currency: 'JOD' }).format(product.price);
                const card = document.createElement('div');
                card.className = "bg-gray-800/80 backdrop-blur-sm rounded-xl shadow-lg overflow-hidden flex flex-col transform transition-transform duration-300 hover:scale-[1.03]";
                card.innerHTML = `
                    <img src="${product.imageUrl}" alt="${product.name}" class="w-full h-48 object-cover object-center border-b border-gray-700">
                    <div class="p-6 flex-grow flex flex-col justify-between">
                        <div>
                            <h3 class="text-xl font-bold text-gray-100">${product.name}</h3>
                            <p class="text-sm text-gray-400 mt-2">${product.description}</p>
                        </div>
                        <div class="mt-4">
                            <span class="text-3xl font-bold text-green-400">${currency}</span>
                            <div class="flex space-x-2 mt-2">
                                <button data-product='${JSON.stringify(product)}' class="add-to-wishlist-btn bg-yellow-500 text-gray-900 font-semibold py-2 px-4 rounded-full transition-colors duration-200 hover:bg-yellow-400 text-sm">
                                    🤍 أضف للأمنيات
                                </button>
                                <button data-description="${product.description}" class="speak-description-btn bg-purple-600 text-white font-semibold py-2 px-4 rounded-full transition-colors duration-200 hover:bg-purple-700 text-sm">
                                    استمع للوصف ✨
                                </button>
                            </div>
                        </div>
                        <div class="mt-6 border-t border-gray-700 pt-4">
                            <h4 class="text-md font-semibold text-gray-200 mb-2">التعليقات</h4>
                            <div class="space-y-2 max-h-32 overflow-y-auto pr-2">
                                ${product.comments.length > 0 ? product.comments.map(comment => `
                                    <div class="text-xs bg-gray-700 p-2 rounded-lg">
                                        <p class="text-gray-300">${comment.text}</p>
                                        <p class="text-gray-500 text-left text-[10px]">~ ${comment.userId.substring(0, 8)}</p>
                                    </div>
                                `).join('') : '<p class="text-xs text-gray-500">لا توجد تعليقات. كن أول من يعلق!</p>'}
                            </div>
                            <div class="mt-3 flex">
                                <input type="text" placeholder="أضف تعليق..." class="comment-input flex-grow p-2 text-xs rounded-l-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:ring-1 focus:ring-indigo-500">
                                <button data-product-id="${product.id}" class="add-comment-btn bg-indigo-600 text-white font-bold py-2 px-3 text-xs rounded-r-lg hover:bg-indigo-700">أرسل</button>
                            </div>
                        </div>
                    </div>
                `;
                productsContainer.appendChild(card);
            });
        }

        function renderWishlist() {
            wishlistContainer.innerHTML = '';
            if (wishlistItems.length === 0) {
                 wishlistContainer.innerHTML = `<p class="text-center text-gray-500 text-lg col-span-full">قائمة أمنياتك فارغة. قم بإضافة بعض الألعاب!</p>`;
                 return;
            }
            wishlistItems.forEach(item => {
                const currency = new Intl.NumberFormat('ar-JO', { style: 'currency', currency: 'JOD' }).format(item.price);
                const itemDiv = document.createElement('div');
                itemDiv.className = "bg-gray-800/80 backdrop-blur-sm rounded-xl shadow-lg p-6 flex items-center justify-between";
                itemDiv.innerHTML = `
                    <div>
                        <h3 class="text-lg font-bold text-gray-100">${item.name}</h3>
                        <span class="text-xl font-semibold text-green-400">${currency}</span>
                    </div>
                    <button data-id="${item.id}" class="remove-from-wishlist-btn text-red-400 hover:text-red-500 transition-colors duration-200">
                        <span class="text-2xl">🗑️</span>
                    </button>
                `;
                wishlistContainer.appendChild(itemDiv);
            });
        }

        function renderAdminProducts() {
            manageProductsContainer.innerHTML = '';
             if (products.length === 0) {
                 manageProductsContainer.innerHTML = `<p class="text-center text-gray-500">لا توجد ألعاب لإدارتها.</p>`;
                 return;
            }
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = "flex items-center justify-between bg-gray-700 p-3 rounded-lg";
                productDiv.innerHTML = `
                    <span class="text-gray-200">${product.name}</span>
                    <button data-id="${product.id}" class="delete-product-btn text-red-400 hover:text-red-500 transition-colors duration-200 font-bold">
                        حذف
                    </button>
                `;
                manageProductsContainer.appendChild(productDiv);
            });
        }

        function renderPaymentMethodsFooter() {
            paymentMethodsFooterContainer.innerHTML = '';
            if (siteConfig.paymentMethods && siteConfig.paymentMethods.length > 0) {
                siteConfig.paymentMethods.forEach(method => {
                    const p = document.createElement('p');
                    p.innerHTML = `<span class="font-bold">${method.name}:</span> <span>${method.value}</span>`;
                    paymentMethodsFooterContainer.appendChild(p);
                });
            } else {
                paymentMethodsFooterContainer.innerHTML = '<p>لم يتم إضافة طرق دفع.</p>';
            }
        }
        
        function renderPaymentMethodsAdmin() {
            paymentMethodsAdminContainer.innerHTML = '';
            if (siteConfig.paymentMethods && siteConfig.paymentMethods.length > 0) {
                 siteConfig.paymentMethods.forEach((method, index) => {
                    const div = document.createElement('div');
                    div.className = "flex items-center justify-between bg-gray-700 p-3 rounded-lg";
                    div.innerHTML = `
                        <span class="text-gray-200">${method.name}: ${method.value}</span>
                        <button data-index="${index}" class="delete-payment-method-btn text-red-400 hover:text-red-500 font-bold">حذف</button>
                    `;
                    paymentMethodsAdminContainer.appendChild(div);
                });
            } else {
                paymentMethodsAdminContainer.innerHTML = '<p class="text-center text-gray-500">لا توجد طرق دفع.</p>';
            }
        }

        // --- NAVIGATION & VIEW MANAGEMENT ---
        function updateView(newView) {
            activeView = newView;
            
            storeView.classList.add('hidden');
            wishlistView.classList.add('hidden');
            adminView.classList.add('hidden');
            
            navStoreBtn.classList.remove('bg-indigo-600');
            navWishlistBtn.classList.remove('bg-indigo-600');
            navAdminBtn.classList.remove('bg-indigo-600');

            if (newView === 'store') {
                storeView.classList.remove('hidden');
                navStoreBtn.classList.add('bg-indigo-600');
            } else if (newView === 'wishlist') {
                wishlistView.classList.remove('hidden');
                navWishlistBtn.classList.add('bg-indigo-600');
            } else if (newView === 'admin') {
                adminView.classList.remove('hidden');
                navAdminBtn.classList.add('bg-indigo-600');
            }
            renderAll();
        }

        navStoreBtn.addEventListener('click', () => updateView('store'));
        navWishlistBtn.addEventListener('click', () => updateView('wishlist'));
        navAdminBtn.addEventListener('click', () => updateView('admin'));

        // --- EVENT LISTENERS (Delegated for dynamic elements) ---
        document.body.addEventListener('click', (e) => {
            const target = e.target.closest('button');
            if (!target) return;

            if (target.matches('.add-to-wishlist-btn')) addToWishlist(JSON.parse(target.dataset.product));
            if (target.matches('.remove-from-wishlist-btn')) removeFromWishlist(target.dataset.id);
            if (target.matches('.delete-product-btn')) deleteProduct(target.dataset.id);
            if (target.matches('.add-comment-btn')) addComment(target.dataset.productId, target.previousElementSibling);
            if (target.matches('.speak-description-btn')) speakDescription(target.dataset.description);
            if (target.matches('.delete-payment-method-btn')) deletePaymentMethod(parseInt(target.dataset.index));
        });

        // --- ADMIN ACTION EVENT LISTENERS ---
        saveProductBtn.addEventListener('click', () => {
             saveProduct(nameInput.value, priceInput.value, imageUrlInput.value, descriptionInput.value);
        });
        saveSiteSettingsBtn.addEventListener('click', saveSiteSettings);
        addPaymentMethodBtn.addEventListener('click', addPaymentMethod);
        savePaymentMethodsBtn.addEventListener('click', saveWhatsappNumber);
        generateDescriptionBtn.addEventListener('click', () => generateDescription(nameInput.value, descriptionInput));
        generateImageBtn.addEventListener('click', () => generateImage(nameInput.value, imageUrlInput));

        // --- ACTIONS & LOGIC ---
        async function saveSiteSettings() {
             if (userId !== adminUid) return showModal('خطأ', 'ليس لديك صلاحية.');
             const newConfig = {
                 ...siteConfig,
                 siteTitle: siteTitleInput.value,
                 siteSubtitle: siteSubtitleInput.value,
                 logoUrl: logoUrlInput.value,
                 backgroundUrl: backgroundUrlInput.value,
                 navNames: {
                     store: navStoreNameInput.value,
                     wishlist: navWishlistNameInput.value,
                     admin: navAdminNameInput.value,
                 }
             };
             try {
                await setDoc(doc(db, `artifacts/${appId}/public/data/settings/siteConfig`), newConfig, { merge: true });
                showModal('تم', 'تم حفظ إعدادات الموقع بنجاح.');
             } catch(e) {
                 console.error("Error saving site settings:", e);
                 showModal('خطأ', 'فشل حفظ الإعدادات.');
             }
        }

        async function addPaymentMethod() {
            if (userId !== adminUid) return showModal('خطأ', 'ليس لديك صلاحية.');
            const name = paymentMethodNameInput.value.trim();
            const value = paymentMethodValueInput.value.trim();
            if(!name || !value) return showModal('خطأ', 'يرجى ملء اسم وقيمة طريقة الدفع.');

            const updatedMethods = [...siteConfig.paymentMethods, { name, value }];
            const newConfig = { ...siteConfig, paymentMethods: updatedMethods };

            try {
                await setDoc(doc(db, `artifacts/${appId}/public/data/settings/siteConfig`), newConfig, { merge: true });
                paymentMethodNameInput.value = '';
                paymentMethodValueInput.value = '';
                showModal('تم', 'تمت إضافة طريقة الدفع.');
             } catch(e) {
                 console.error("Error adding payment method:", e);
                 showModal('خطأ', 'فشل إضافة طريقة الدفع.');
             }
        }
        
        async function deletePaymentMethod(index) {
            if (userId !== adminUid) return showModal('خطأ', 'ليس لديك صلاحية.');
            const updatedMethods = siteConfig.paymentMethods.filter((_, i) => i !== index);
            const newConfig = { ...siteConfig, paymentMethods: updatedMethods };
            try {
                await setDoc(doc(db, `artifacts/${appId}/public/data/settings/siteConfig`), newConfig, { merge: true });
                showModal('تم', 'تم حذف طريقة الدفع.');
             } catch(e) {
                 console.error("Error deleting payment method:", e);
                 showModal('خطأ', 'فشل حذف طريقة الدفع.');
             }
        }

        async function saveWhatsappNumber() {
            if (userId !== adminUid) return showModal('خطأ', 'ليس لديك صلاحية.');
            const newConfig = { ...siteConfig, whatsapp: whatsappInput.value };
            try {
                await setDoc(doc(db, `artifacts/${appId}/public/data/settings/siteConfig`), newConfig, { merge: true });
                showModal('تم', 'تم حفظ رقم الواتس اب.');
             } catch(e) {
                 console.error("Error saving whatsapp:", e);
                 showModal('خطأ', 'فشل حفظ الرقم.');
             }
        }
        
        async function saveProduct(name, price, imageUrl, description) {
            if (!name || !price || !imageUrl) return showModal('خطأ', 'الرجاء إدخال اسم اللعبة والسعر ورابط الصورة.');
            try {
                await addDoc(collection(db, `artifacts/${appId}/public/data/products`), {
                    name, price: parseFloat(price), imageUrl, description
                });
                showModal('تم بنجاح', 'تم إضافة اللعبة بنجاح!');
                nameInput.value = ''; priceInput.value = ''; imageUrlInput.value = ''; descriptionInput.value = '';
            } catch (e) { console.error('Error adding product:', e); showModal('خطأ', 'فشل إضافة اللعبة.'); }
        }
        
        async function deleteProduct(id) {
            if (userId !== adminUid) return showModal('خطأ', 'ليس لديك صلاحية.');
            try {
                await deleteDoc(doc(db, `artifacts/${appId}/public/data/products`, id));
                showModal('تم الحذف', 'تم حذف اللعبة بنجاح.');
            } catch (e) { console.error('Error deleting product:', e); showModal('خطأ', 'فشل في حذف اللعبة.'); }
        }
        
        async function addToWishlist(product) {
            try {
                const q = query(collection(db, `artifacts/${appId}/users/${userId}/wishlist`), where('name', '==', product.name));
                const querySnapshot = await getDocs(q);
                if (querySnapshot.empty) {
                    await addDoc(collection(db, `artifacts/${appId}/users/${userId}/wishlist`), {
                        name: product.name, price: product.price, addedAt: new Date().toISOString()
                    });
                    showModal('تم بنجاح', 'تمت إضافة اللعبة إلى قائمة الأمنيات.');
                } else { showModal('موجود مسبقاً', 'هذه اللعبة موجودة بالفعل في قائمة الأمنيات.'); }
            } catch (e) { console.error('Error adding to wishlist:', e); showModal('خطأ', 'فشل إضافة اللعبة إلى قائمة الأمنيات.'); }
        }

        async function removeFromWishlist(id) {
            try {
                await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/wishlist`, id));
                showModal('تم الحذف', 'تمت إزالة اللعبة من قائمة الأمنيات.');
            } catch (e) { console.error('Error removing from wishlist:', e); showModal('خطأ', 'فشل إزالة اللعبة.'); }
        }

        async function addComment(productId, inputElement) {
            const text = inputElement.value.trim();
            if (!text) return showModal('خطأ', 'التعليق لا يمكن أن يكون فارغاً.');
            try {
                await addDoc(collection(db, `artifacts/${appId}/public/data/comments`), {
                    productId, text, userId: userId || 'زائر', timestamp: Timestamp.now()
                });
                inputElement.value = '';
            } catch (e) { console.error('Error adding comment:', e); showModal('خطأ', 'فشل في إضافة التعليق.'); }
        }

        // --- GEMINI API & TTS FUNCTIONS (Unchanged) ---
        async function generateDescription(gameName, descriptionInputElement) {
            if (!gameName) return showModal('خطأ', 'الرجاء إدخال اسم اللعبة أولاً.');
            const systemPrompt = "أنت كاتب محتوى إعلاني محترف للألعاب. قم بإنشاء وصف جذاب ومقنع للعبة بناءً على اسمها باللغة العربية. الوصف يجب أن يكون قصيرًا ومثيرًا للاهتمام.";
            const userQuery = `اكتب وصفًا للعبة تسمى: ${gameName}`;
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            const payload = { contents: [{ parts: [{ text: userQuery }] }], systemInstruction: { parts: [{ text: systemPrompt }] },};
            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                const result = await response.json();
                const text = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                if (text) { descriptionInputElement.value = text; } else { throw new Error('No content returned.'); }
            } catch (e) { console.error('Error generating description:', e); showModal('خطأ', 'فشل في توليد الوصف.'); }
        }
        async function generateImage(gameName, imageUrlInputElement) {
            if (!gameName) return showModal('خطأ', 'الرجاء إدخال اسم اللعبة أولاً.');
            const payload = { instances: { prompt: `Artistic, high-quality, digital art of the game ${gameName}` }, parameters: { "sampleCount": 1 } };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;
            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                const result = await response.json();
                const base64Data = result?.predictions?.[0]?.bytesBase64Encoded;
                if (base64Data) { imageUrlInputElement.value = `data:image/png;base64,${base64Data}`; } else { throw new Error('No image data returned.'); }
            } catch (e) { console.error('Error generating image:', e); showModal('خطأ', 'فشل في توليد الصورة.'); }
        }
        async function speakDescription(description) {
            if (!description) return showModal('خطأ', 'لا يوجد وصف للاستماع إليه.');
            const payload = { contents: [{ parts: [{ text: description }] }], generationConfig: { responseModalities: ["AUDIO"], speechConfig: { voiceConfig: { prebuiltVoiceConfig: { voiceName: "Rasalgethi" } } } }, model: "gemini-2.5-flash-preview-tts" };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;
            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                const result = await response.json();
                const part = result?.candidates?.[0]?.content?.parts?.[0];
                if (part?.inlineData?.data) {
                    const pcm16 = new Int16Array(base64ToArrayBuffer(part.inlineData.data));
                    const wavBlob = pcmToWav(pcm16, 24000);
                    new Audio(URL.createObjectURL(wavBlob)).play();
                } else { throw new Error('No audio data returned.'); }
            } catch (e) { console.error('Error with TTS:', e); showModal('خطأ', 'فشل في تشغيل الصوت.'); }
        }

        // --- HELPER FUNCTIONS (Unchanged) ---
        function showError(message) { errorMessage.textContent = message; errorMessage.classList.remove('hidden'); loadingIndicator.classList.add('hidden'); mainContent.classList.add('hidden'); footer.classList.add('hidden'); }
        function showModal(title, message) { const modal = document.getElementById('modal'); document.getElementById('modal-title').textContent = title; document.getElementById('modal-content').textContent = message; modal.classList.remove('hidden'); document.getElementById('modal-close-btn').onclick = () => { modal.classList.add('hidden'); }; }
        function base64ToArrayBuffer(base64) { const binaryString = atob(base64); const len = binaryString.length; const bytes = new Uint8Array(len); for (let i = 0; i < len; i++) { bytes[i] = binaryString.charCodeAt(i); } return bytes.buffer; }
        function pcmToWav(pcmData, sampleRate) { const buffer = new ArrayBuffer(44 + pcmData.length * 2); const view = new DataView(buffer); const writeString = (view, offset, string) => { for (let i = 0; i < string.length; i++) { view.setUint8(offset + i, string.charCodeAt(i)); } }; writeString(view, 0, 'RIFF'); view.setUint32(4, 36 + pcmData.length * 2, true); writeString(view, 8, 'WAVE'); writeString(view, 12, 'fmt '); view.setUint32(16, 16, true); view.setUint16(20, 1, true); view.setUint16(22, 1, true); view.setUint32(24, sampleRate, true); view.setUint32(28, sampleRate * 2, true); view.setUint16(32, 2, true); view.setUint16(34, 16, true); writeString(view, 36, 'data'); view.setUint32(40, pcmData.length * 2, true); let offset = 44; for (let i = 0; i < pcmData.length; i++) { view.setInt16(offset, pcmData[i], true); offset += 2; } return new Blob([view], { type: 'audio/wav' }); }
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>متجر الألعاب - بيع وشراء حسابات</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;700;900&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Tajawal', sans-serif;
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }
        .body-overlay::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(17, 24, 39, 0.8); /* bg-gray-900 with opacity */
            z-index: -1;
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #2d3748; /* gray-800 */
        }
        ::-webkit-scrollbar-thumb {
            background: #4a5568; /* gray-600 */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #718096; /* gray-500 */
        }
    </style>
</head>
<body id="site-body" class="bg-gray-900 text-white">
    <div id="body-overlay-container"></div>
    <div class="min-h-screen flex flex-col items-center p-4 sm:p-8 relative z-10">
        <!-- Header -->
        <header class="w-full max-w-5xl text-center py-6 flex flex-col items-center">
            <img id="site-logo" src="" alt="Site Logo" class="h-20 w-20 mb-4 hidden rounded-full object-cover">
            <h1 id="site-title" class="text-4xl sm:text-6xl font-extrabold text-white animate-pulse">متجر الألعاب</h1>
            <p id="site-subtitle" class="text-gray-400 mt-2 text-lg sm:text-xl">بيع وشراء حسابات الألعاب</p>
            <div id="user-id-container" class="mt-4 text-sm text-gray-500 hidden">
                معرّف المستخدم الخاص بك: <span id="user-id" class="font-mono text-gray-300 break-all"></span>
            </div>
        </header>
      
        <!-- Loading & Error States -->
        <div id="loading-indicator" class="flex flex-col items-center justify-center p-8">
            <div class="w-12 h-12 border-4 border-t-4 border-gray-600 rounded-full animate-spin"></div>
            <p class="mt-4 text-gray-400">جاري التحميل...</p>
        </div>
        <div id="error-message" class="bg-red-500 text-white p-4 rounded-lg shadow-md max-w-lg text-center hidden"></div>

        <!-- Main Content -->
        <main id="main-content" class="w-full max-w-5xl mt-8 space-y-12 hidden">
            <nav class="bg-gray-800 p-2 rounded-full shadow-lg flex justify-center space-x-2 sm:space-x-4">
                <button id="nav-store" class="py-2 px-4 sm:px-6 rounded-full text-white font-bold transition-colors duration-200 bg-indigo-600">المتجر</button>
                <button id="nav-wishlist" class="py-2 px-4 sm:px-6 rounded-full text-white font-bold transition-colors duration-200">
                    قائمة الأمنيات (<span id="wishlist-count">0</span>)
                </button>
                <button id="nav-admin" class="py-2 px-4 sm:px-6 rounded-full text-white font-bold transition-colors duration-200 hidden">لوحة الإدارة</button>
            </nav>

            <!-- Store View -->
            <section id="store-view">
                <h2 class="text-3xl font-bold text-gray-100 mb-6 text-center">جميع الألعاب المتاحة</h2>
                <div id="products-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Products will be injected here by JavaScript -->
                </div>
            </section>

            <!-- Wishlist View -->
            <section id="wishlist-view" class="hidden">
                <h2 class="text-3xl font-bold text-gray-100 mb-6 text-center">قائمة أمنياتك</h2>
                <div id="wishlist-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Wishlist items will be injected here by JavaScript -->
                </div>
            </section>
        
            <!-- Admin View -->
            <section id="admin-view" class="hidden">
                <h2 class="text-3xl font-bold text-gray-100 mb-6 text-center">لوحة الإدارة</h2>
                <div class="space-y-8 max-w-2xl mx-auto">
                    <!-- Add Product -->
                    <div class="bg-gray-800 p-6 rounded-xl shadow-lg space-y-4">
                        <h3 class="text-2xl font-semibold text-gray-100">إضافة لعبة جديدة</h3>
                        <input id="nameInput" type="text" placeholder="اسم اللعبة" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <input id="priceInput" type="number" placeholder="السعر" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <input id="imageUrlInput" type="text" placeholder="رابط الصورة (URL)" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <button id="generateImageBtn" class="bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition-colors duration-200 hover:bg-blue-700">
                            انشئ صورة ✨
                        </button>
                        <textarea id="descriptionInput" placeholder="وصف اللعبة" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600 h-24 resize-none focus:outline-none focus:ring-2 focus:ring-indigo-500"></textarea>
                        <div class="flex justify-end space-x-2">
                            <button id="generateDescriptionBtn" class="bg-purple-600 text-white font-bold py-2 px-6 rounded-lg transition-colors duration-200 hover:bg-purple-700">
                                انشئ وصف ✨
                            </button>
                            <button id="saveProductBtn" class="bg-green-600 text-white font-bold py-2 px-6 rounded-lg transition-colors duration-200 hover:bg-green-700">
                                حفظ اللعبة
                            </button>
                        </div>
                    </div>

                    <!-- Site Customization -->
                    <div class="bg-gray-800 p-6 rounded-xl shadow-lg space-y-4">
                        <h3 class="text-2xl font-semibold text-gray-100">تخصيص الموقع</h3>
                        <input id="siteTitleInput" type="text" placeholder="عنوان الموقع الرئيسي" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <input id="siteSubtitleInput" type="text" placeholder="العنوان الفرعي للموقع" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <input id="logoUrlInput" type="text" placeholder="رابط لوقو الموقع (URL)" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <input id="backgroundUrlInput" type="text" placeholder="رابط خلفية الموقع (URL)" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <h4 class="text-lg font-semibold text-gray-200 pt-2">تعديل أسماء القائمة</h4>
                        <input id="navStoreNameInput" type="text" placeholder="اسم زر المتجر" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <input id="navWishlistNameInput" type="text" placeholder="اسم زر قائمة الأمنيات" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                         <input id="navAdminNameInput" type="text" placeholder="اسم زر لوحة الإدارة" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <div class="flex justify-end">
                            <button id="saveSiteSettingsBtn" class="bg-blue-600 text-white font-bold py-2 px-6 rounded-lg transition-colors duration-200 hover:bg-blue-700">حفظ التغييرات</button>
                        </div>
                    </div>
              
                    <!-- Manage Products -->
                    <div class="bg-gray-800 p-6 rounded-xl shadow-lg space-y-4">
                        <h3 class="text-2xl font-semibold text-gray-100">إدارة الألعاب</h3>
                        <div id="manage-products-container" class="space-y-2">
                            <!-- Admin product list will be injected here -->
                        </div>
                    </div>

                    <!-- Manage Payment Methods -->
                    <div class="bg-gray-800 p-6 rounded-xl shadow-lg space-y-4">
                        <h3 class="text-2xl font-semibold text-gray-100">إدارة طرق الدفع</h3>
                        <div id="payment-methods-admin-container" class="space-y-2">
                            <!-- Admin payment methods list -->
                        </div>
                        <h4 class="text-lg font-semibold text-gray-200 pt-2">إضافة طريقة دفع جديدة</h4>
                        <div class="flex space-x-2">
                            <input id="paymentMethodNameInput" type="text" placeholder="اسم الطريقة (مثال: كليك)" class="w-1/2 p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                            <input id="paymentMethodValueInput" type="text" placeholder="الرقم أو الحساب" class="w-1/2 p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        </div>
                         <input id="whatsappInput" type="text" placeholder="رقم الواتس اب (مع رمز الدولة)" class="w-full p-3 rounded-lg bg-gray-700 text-gray-100 border border-gray-600">
                        <div class="flex justify-end space-x-2">
                             <button id="addPaymentMethodBtn" class="bg-green-500 text-white font-bold py-2 px-4 rounded-lg">إضافة</button>
                             <button id="savePaymentMethodsBtn" class="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">حفظ رقم الواتس</button>
                        </div>
                    </div>
                </div>
            </section>
        </main>

        <!-- Footer -->
        <footer id="footer" class="w-full max-w-5xl mt-12 py-6 text-center text-gray-500 border-t border-gray-800 hidden">
            <p class="text-lg font-bold text-gray-300 mb-2">معلومات الدفع</p>
            <div id="payment-methods-footer-container">
                <!-- Payment methods will be injected here -->
            </div>
        </footer>

        <!-- WhatsApp Floating Button -->
        <a id="whatsapp-btn" href="#" target="_blank" class="fixed bottom-6 right-6 bg-green-500 text-white w-16 h-16 rounded-full flex items-center justify-center shadow-lg transform transition-transform hover:scale-110 hidden">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-8 h-8" viewBox="0 0 24 24" fill="currentColor"><path d="M.057 24l1.687-6.163c-1.041-1.804-1.588-3.849-1.587-5.946.003-6.556 5.338-11.891 11.893-11.891 3.181.001 6.167 1.24 8.413 3.488 2.245 2.248 3.487 5.235 3.487 8.413 0 6.557-5.338 11.892-11.894 11.892-1.99 0-3.903-.52-5.613-1.476l-6.238 1.654zm6.597-3.807c1.676.995 3.276 1.591 5.392 1.592 5.448 0 9.886-4.434 9.889-9.885.002-5.462-4.415-9.89-9.881-9.892-5.452 0-9.887 4.434-9.889 9.886-.001 2.267.655 4.398 1.908 6.166l-.253 1.018 1.023-.252zm7.49-6.201c-.37-.187-2.19-1.082-2.53-1.207-.34-.125-.582-.187-.825.187-.243.375-.957 1.207-.957 1.207-.224.25-.448.281-.824.093-.375-.187-1.575-.582-3.003-1.855-1.109-.968-1.857-2.173-2.08-2.548-.225-.375-.015-.582.171-.77.171-.171.375-.448.563-.66.187-.219.25-.375.375-.618.125-.25.063-.469-.031-.656-.094-.187-.825-1.984-.825-1.984-.281-.678-.563-.582-.781-.582h-.219c-.219 0-.563.094-.859.375-.297.281-1.125 1.109-1.125 2.703 0 1.594 1.156 3.125 1.313 3.344.156.219 2.281 3.656 5.531 4.875 3.25 1.219 3.25 1.219.907.828.625.094 1.969-.828 2.25-1.594.281-.766.281-1.422.188-1.594-.094-.172-.313-.281-.688-.469z"/></svg>
        </a>

        <!-- Modal for alerts -->
        <div id="modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center hidden z-50">
            <div class="bg-gray-800 p-8 rounded-lg shadow-xl max-w-sm w-full border border-gray-700">
                <h3 id="modal-title" class="text-xl font-bold mb-4 text-gray-100"></h3>
                <p id="modal-content" class="text-gray-400 mb-6"></p>
                <div class="flex justify-start">
                    <button id="modal-close-btn" class="bg-indigo-600 text-white font-medium py-2 px-4 rounded-full hover:bg-indigo-700 transition duration-300">إغلاق</button>
                </div>
            </div>
        </div>
    </div>

    <script type="module">
        // Firebase Imports
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithCustomToken, signInAnonymously } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, doc, setDoc, query, where, getDocs, deleteDoc, Timestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- STATE MANAGEMENT ---
        let db, auth, userId, appId;
        let products = [];
        let comments = [];
        let wishlistItems = [];
        let siteConfig = {
            siteTitle: 'متجر الألعاب',
            siteSubtitle: 'بيع وشراء حسابات الألعاب',
            logoUrl: '',
            backgroundUrl: '',
            navNames: {
                store: 'المتجر',
                wishlist: 'قائمة الأمنيات',
                admin: 'لوحة الإدارة'
            },
            paymentMethods: [],
            whatsapp: ''
        };
        let activeView = 'store';
        const adminUid = '18382536631674206939'; // Admin UID for demo purposes

        // --- DOM ELEMENT REFERENCES ---
        // General UI
        const loadingIndicator = document.getElementById('loading-indicator');
        const errorMessage = document.getElementById('error-message');
        const mainContent = document.getElementById('main-content');
        const footer = document.getElementById('footer');
        const userIdContainer = document.getElementById('user-id-container');
        const userIdSpan = document.getElementById('user-id');
        const siteBody = document.getElementById('site-body');
        const bodyOverlayContainer = document.getElementById('body-overlay-container');

        // Header
        const siteLogo = document.getElementById('site-logo');
        const siteTitle = document.getElementById('site-title');
        const siteSubtitle = document.getElementById('site-subtitle');

        // Navigation
        const navStoreBtn = document.getElementById('nav-store');
        const navWishlistBtn = document.getElementById('nav-wishlist');
        const navAdminBtn = document.getElementById('nav-admin');
        const wishlistCountSpan = document.getElementById('wishlist-count');

        // Views
        const storeView = document.getElementById('store-view');
        const wishlistView = document.getElementById('wishlist-view');
        const adminView = document.getElementById('admin-view');

        // Containers
        const productsContainer = document.getElementById('products-container');
        const wishlistContainer = document.getElementById('wishlist-container');
        const manageProductsContainer = document.getElementById('manage-products-container');
        const paymentMethodsAdminContainer = document.getElementById('payment-methods-admin-container');
        const paymentMethodsFooterContainer = document.getElementById('payment-methods-footer-container');

        // Admin: Add Product
        const nameInput = document.getElementById('nameInput');
        const priceInput = document.getElementById('priceInput');
        const imageUrlInput = document.getElementById('imageUrlInput');
        const descriptionInput = document.getElementById('descriptionInput');
        const generateImageBtn = document.getElementById('generateImageBtn');
        const generateDescriptionBtn = document.getElementById('generateDescriptionBtn');
        const saveProductBtn = document.getElementById('saveProductBtn');
        
        // Admin: Site Customization
        const siteTitleInput = document.getElementById('siteTitleInput');
        const siteSubtitleInput = document.getElementById('siteSubtitleInput');
        const logoUrlInput = document.getElementById('logoUrlInput');
        const backgroundUrlInput = document.getElementById('backgroundUrlInput');
        const navStoreNameInput = document.getElementById('navStoreNameInput');
        const navWishlistNameInput = document.getElementById('navWishlistNameInput');
        const navAdminNameInput = document.getElementById('navAdminNameInput');
        const saveSiteSettingsBtn = document.getElementById('saveSiteSettingsBtn');

        // Admin: Payment Methods
        const paymentMethodNameInput = document.getElementById('paymentMethodNameInput');
        const paymentMethodValueInput = document.getElementById('paymentMethodValueInput');
        const whatsappInput = document.getElementById('whatsappInput');
        const addPaymentMethodBtn = document.getElementById('addPaymentMethodBtn');
        const savePaymentMethodsBtn = document.getElementById('savePaymentMethodsBtn');

        // Contact
        const whatsappBtn = document.getElementById('whatsapp-btn');

        // --- INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', initializeFirebase);

        async function initializeFirebase() {
            try {
                appId = typeof window.__app_id !== 'undefined' ? window.__app_id : 'default-app-id';
                const firebaseConfig = typeof window.__firebase_config !== 'undefined' ? JSON.parse(window.__firebase_config) : {};
                const initialAuthToken = typeof window.__initial_auth_token !== 'undefined' ? window.__initial_auth_token : null;

                if (!firebaseConfig.apiKey) throw new Error("Firebase config is missing.");

                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }
                
                userId = auth.currentUser?.uid;
                if(userId) {
                    userIdSpan.textContent = userId;
                    userIdContainer.classList.remove('hidden');
                    if (userId === adminUid) {
                        navAdminBtn.classList.remove('hidden');
                    }
                    setupFirestoreListeners(userId);
                }

                mainContent.classList.remove('hidden');
                footer.classList.remove('hidden');
                loadingIndicator.classList.add('hidden');
            } catch (e) {
                console.error('Firebase Initialization Error:', e);
                showError('حدث خطأ في الاتصال بالخادم. يرجى المحاولة لاحقاً.');
            }
        }
        
        function setupFirestoreListeners(uid) {
            // Products Listener
            onSnapshot(collection(db, `artifacts/${appId}/public/data/products`), (snapshot) => {
                products = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAll();
            });

            // Comments Listener
            onSnapshot(collection(db, `artifacts/${appId}/public/data/comments`), (snapshot) => {
                comments = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAll();
            });

            // Wishlist Listener
            onSnapshot(collection(db, `artifacts/${appId}/users/${uid}/wishlist`), (snapshot) => {
                wishlistItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                wishlistCountSpan.textContent = wishlistItems.length;
                renderAll();
            });

            // Site Config Listener
            onSnapshot(doc(db, `artifacts/${appId}/public/data/settings/siteConfig`), (docSnap) => {
                if (docSnap.exists()) {
                    // Merge with defaults to avoid errors if some fields are missing
                    siteConfig = { ...siteConfig, ...docSnap.data() };
                }
                updateSiteUI();
            });
        }

        // --- UI UPDATE FUNCTIONS ---
        function updateSiteUI() {
            // Update Header
            siteTitle.textContent = siteConfig.siteTitle;
            siteSubtitle.textContent = siteConfig.siteSubtitle;
            if(siteConfig.logoUrl) {
                siteLogo.src = siteConfig.logoUrl;
                siteLogo.classList.remove('hidden');
            } else {
                siteLogo.classList.add('hidden');
            }

            // Update Background
            if(siteConfig.backgroundUrl) {
                siteBody.style.backgroundImage = `url('${siteConfig.backgroundUrl}')`;
                bodyOverlayContainer.className = 'body-overlay';
            } else {
                siteBody.style.backgroundImage = 'none';
                bodyOverlayContainer.className = '';
            }
            
            // Update Navigation
            navStoreBtn.textContent = siteConfig.navNames.store;
            // Keep the count span
            const currentCount = wishlistCountSpan.textContent;
            navWishlistBtn.innerHTML = `${siteConfig.navNames.wishlist} (<span id="wishlist-count">${currentCount}</span>)`;
            navAdminBtn.textContent = siteConfig.navNames.admin;

            // Update Footer Payment Info
            renderPaymentMethodsFooter();

            // Update WhatsApp Button
             if (siteConfig.whatsapp) {
                whatsappBtn.href = `https://wa.me/${siteConfig.whatsapp}?text=مرحباً، أود إرسال إثبات الدفع.`;
                whatsappBtn.classList.remove('hidden');
            } else {
                whatsappBtn.classList.add('hidden');
            }

            // Update Admin Panel Inputs with current values
            siteTitleInput.value = siteConfig.siteTitle;
            siteSubtitleInput.value = siteConfig.siteSubtitle;
            logoUrlInput.value = siteConfig.logoUrl;
            backgroundUrlInput.value = siteConfig.backgroundUrl;
            navStoreNameInput.value = siteConfig.navNames.store;
            navWishlistNameInput.value = siteConfig.navNames.wishlist;
            navAdminNameInput.value = siteConfig.navNames.admin;
            whatsappInput.value = siteConfig.whatsapp;
            renderPaymentMethodsAdmin();
        }

        // --- RENDER FUNCTIONS ---
        function renderAll() {
            switch(activeView) {
                case 'store':
                    renderProducts();
                    break;
                case 'wishlist':
                    renderWishlist();
                    break;
                case 'admin':
                    renderAdminProducts();
                    renderPaymentMethodsAdmin();
                    break;
            }
        }
        
        function renderProducts() {
            productsContainer.innerHTML = '';
            const productsWithComments = products.map(product => {
                const productComments = comments
                    .filter(comment => comment.productId === product.id)
                    .map(c => ({...c, timestamp: c.timestamp?.toDate()}))
                    .sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));
                return { ...product, comments: productComments };
            });

            if (productsWithComments.length === 0) {
                 productsContainer.innerHTML = `<p class="text-center text-gray-500 text-lg col-span-full">لا توجد ألعاب متوفرة حالياً.</p>`;
                 return;
            }

            productsWithComments.forEach(product => {
                const currency = new Intl.NumberFormat('ar-JO', { style: 'currency', currency: 'JOD' }).format(product.price);
                const card = document.createElement('div');
                card.className = "bg-gray-800/80 backdrop-blur-sm rounded-xl shadow-lg overflow-hidden flex flex-col transform transition-transform duration-300 hover:scale-[1.03]";
                card.innerHTML = `
                    <img src="${product.imageUrl}" alt="${product.name}" class="w-full h-48 object-cover object-center border-b border-gray-700">
                    <div class="p-6 flex-grow flex flex-col justify-between">
                        <div>
                            <h3 class="text-xl font-bold text-gray-100">${product.name}</h3>
                            <p class="text-sm text-gray-400 mt-2">${product.description}</p>
                        </div>
                        <div class="mt-4">
                            <span class="text-3xl font-bold text-green-400">${currency}</span>
                            <div class="flex space-x-2 mt-2">
                                <button data-product='${JSON.stringify(product)}' class="add-to-wishlist-btn bg-yellow-500 text-gray-900 font-semibold py-2 px-4 rounded-full transition-colors duration-200 hover:bg-yellow-400 text-sm">
                                    🤍 أضف للأمنيات
                                </button>
                                <button data-description="${product.description}" class="speak-description-btn bg-purple-600 text-white font-semibold py-2 px-4 rounded-full transition-colors duration-200 hover:bg-purple-700 text-sm">
                                    استمع للوصف ✨
                                </button>
                            </div>
                        </div>
                        <div class="mt-6 border-t border-gray-700 pt-4">
                            <h4 class="text-md font-semibold text-gray-200 mb-2">التعليقات</h4>
                            <div class="space-y-2 max-h-32 overflow-y-auto pr-2">
                                ${product.comments.length > 0 ? product.comments.map(comment => `
                                    <div class="text-xs bg-gray-700 p-2 rounded-lg">
                                        <p class="text-gray-300">${comment.text}</p>
                                        <p class="text-gray-500 text-left text-[10px]">~ ${comment.userId.substring(0, 8)}</p>
                                    </div>
                                `).join('') : '<p class="text-xs text-gray-500">لا توجد تعليقات. كن أول من يعلق!</p>'}
                            </div>
                            <div class="mt-3 flex">
                                <input type="text" placeholder="أضف تعليق..." class="comment-input flex-grow p-2 text-xs rounded-l-lg bg-gray-700 text-gray-100 border border-gray-600 focus:outline-none focus:ring-1 focus:ring-indigo-500">
                                <button data-product-id="${product.id}" class="add-comment-btn bg-indigo-600 text-white font-bold py-2 px-3 text-xs rounded-r-lg hover:bg-indigo-700">أرسل</button>
                            </div>
                        </div>
                    </div>
                `;
                productsContainer.appendChild(card);
            });
        }

        function renderWishlist() {
            wishlistContainer.innerHTML = '';
            if (wishlistItems.length === 0) {
                 wishlistContainer.innerHTML = `<p class="text-center text-gray-500 text-lg col-span-full">قائمة أمنياتك فارغة. قم بإضافة بعض الألعاب!</p>`;
                 return;
            }
            wishlistItems.forEach(item => {
                const currency = new Intl.NumberFormat('ar-JO', { style: 'currency', currency: 'JOD' }).format(item.price);
                const itemDiv = document.createElement('div');
                itemDiv.className = "bg-gray-800/80 backdrop-blur-sm rounded-xl shadow-lg p-6 flex items-center justify-between";
                itemDiv.innerHTML = `
                    <div>
                        <h3 class="text-lg font-bold text-gray-100">${item.name}</h3>
                        <span class="text-xl font-semibold text-green-400">${currency}</span>
                    </div>
                    <button data-id="${item.id}" class="remove-from-wishlist-btn text-red-400 hover:text-red-500 transition-colors duration-200">
                        <span class="text-2xl">🗑️</span>
                    </button>
                `;
                wishlistContainer.appendChild(itemDiv);
            });
        }

        function renderAdminProducts() {
            manageProductsContainer.innerHTML = '';
             if (products.length === 0) {
                 manageProductsContainer.innerHTML = `<p class="text-center text-gray-500">لا توجد ألعاب لإدارتها.</p>`;
                 return;
            }
            products.forEach(product => {
                const productDiv = document.createElement('div');
                productDiv.className = "flex items-center justify-between bg-gray-700 p-3 rounded-lg";
                productDiv.innerHTML = `
                    <span class="text-gray-200">${product.name}</span>
                    <button data-id="${product.id}" class="delete-product-btn text-red-400 hover:text-red-500 transition-colors duration-200 font-bold">
                        حذف
                    </button>
                `;
                manageProductsContainer.appendChild(productDiv);
            });
        }

        function renderPaymentMethodsFooter() {
            paymentMethodsFooterContainer.innerHTML = '';
            if (siteConfig.paymentMethods && siteConfig.paymentMethods.length > 0) {
                siteConfig.paymentMethods.forEach(method => {
                    const p = document.createElement('p');
                    p.innerHTML = `<span class="font-bold">${method.name}:</span> <span>${method.value}</span>`;
                    paymentMethodsFooterContainer.appendChild(p);
                });
            } else {
                paymentMethodsFooterContainer.innerHTML = '<p>لم يتم إضافة طرق دفع.</p>';
            }
        }
        
        function renderPaymentMethodsAdmin() {
            paymentMethodsAdminContainer.innerHTML = '';
            if (siteConfig.paymentMethods && siteConfig.paymentMethods.length > 0) {
                 siteConfig.paymentMethods.forEach((method, index) => {
                    const div = document.createElement('div');
                    div.className = "flex items-center justify-between bg-gray-700 p-3 rounded-lg";
                    div.innerHTML = `
                        <span class="text-gray-200">${method.name}: ${method.value}</span>
                        <button data-index="${index}" class="delete-payment-method-btn text-red-400 hover:text-red-500 font-bold">حذف</button>
                    `;
                    paymentMethodsAdminContainer.appendChild(div);
                });
            } else {
                paymentMethodsAdminContainer.innerHTML = '<p class="text-center text-gray-500">لا توجد طرق دفع.</p>';
            }
        }

        // --- NAVIGATION & VIEW MANAGEMENT ---
        function updateView(newView) {
            activeView = newView;
            
            storeView.classList.add('hidden');
            wishlistView.classList.add('hidden');
            adminView.classList.add('hidden');
            
            navStoreBtn.classList.remove('bg-indigo-600');
            navWishlistBtn.classList.remove('bg-indigo-600');
            navAdminBtn.classList.remove('bg-indigo-600');

            if (newView === 'store') {
                storeView.classList.remove('hidden');
                navStoreBtn.classList.add('bg-indigo-600');
            } else if (newView === 'wishlist') {
                wishlistView.classList.remove('hidden');
                navWishlistBtn.classList.add('bg-indigo-600');
            } else if (newView === 'admin') {
                adminView.classList.remove('hidden');
                navAdminBtn.classList.add('bg-indigo-600');
            }
            renderAll();
        }

        navStoreBtn.addEventListener('click', () => updateView('store'));
        navWishlistBtn.addEventListener('click', () => updateView('wishlist'));
        navAdminBtn.addEventListener('click', () => updateView('admin'));

        // --- EVENT LISTENERS (Delegated for dynamic elements) ---
        document.body.addEventListener('click', (e) => {
            const target = e.target.closest('button');
            if (!target) return;

            if (target.matches('.add-to-wishlist-btn')) addToWishlist(JSON.parse(target.dataset.product));
            if (target.matches('.remove-from-wishlist-btn')) removeFromWishlist(target.dataset.id);
            if (target.matches('.delete-product-btn')) deleteProduct(target.dataset.id);
            if (target.matches('.add-comment-btn')) addComment(target.dataset.productId, target.previousElementSibling);
            if (target.matches('.speak-description-btn')) speakDescription(target.dataset.description);
            if (target.matches('.delete-payment-method-btn')) deletePaymentMethod(parseInt(target.dataset.index));
        });

        // --- ADMIN ACTION EVENT LISTENERS ---
        saveProductBtn.addEventListener('click', () => {
             saveProduct(nameInput.value, priceInput.value, imageUrlInput.value, descriptionInput.value);
        });
        saveSiteSettingsBtn.addEventListener('click', saveSiteSettings);
        addPaymentMethodBtn.addEventListener('click', addPaymentMethod);
        savePaymentMethodsBtn.addEventListener('click', saveWhatsappNumber);
        generateDescriptionBtn.addEventListener('click', () => generateDescription(nameInput.value, descriptionInput));
        generateImageBtn.addEventListener('click', () => generateImage(nameInput.value, imageUrlInput));

        // --- ACTIONS & LOGIC ---
        async function saveSiteSettings() {
             if (userId !== adminUid) return showModal('خطأ', 'ليس لديك صلاحية.');
             const newConfig = {
                 ...siteConfig,
                 siteTitle: siteTitleInput.value,
                 siteSubtitle: siteSubtitleInput.value,
                 logoUrl: logoUrlInput.value,
                 backgroundUrl: backgroundUrlInput.value,
                 navNames: {
                     store: navStoreNameInput.value,
                     wishlist: navWishlistNameInput.value,
                     admin: navAdminNameInput.value,
                 }
             };
             try {
                await setDoc(doc(db, `artifacts/${appId}/public/data/settings/siteConfig`), newConfig, { merge: true });
                showModal('تم', 'تم حفظ إعدادات الموقع بنجاح.');
             } catch(e) {
                 console.error("Error saving site settings:", e);
                 showModal('خطأ', 'فشل حفظ الإعدادات.');
             }
        }

        async function addPaymentMethod() {
            if (userId !== adminUid) return showModal('خطأ', 'ليس لديك صلاحية.');
            const name = paymentMethodNameInput.value.trim();
            const value = paymentMethodValueInput.value.trim();
            if(!name || !value) return showModal('خطأ', 'يرجى ملء اسم وقيمة طريقة الدفع.');

            const updatedMethods = [...siteConfig.paymentMethods, { name, value }];
            const newConfig = { ...siteConfig, paymentMethods: updatedMethods };

            try {
                await setDoc(doc(db, `artifacts/${appId}/public/data/settings/siteConfig`), newConfig, { merge: true });
                paymentMethodNameInput.value = '';
                paymentMethodValueInput.value = '';
                showModal('تم', 'تمت إضافة طريقة الدفع.');
             } catch(e) {
                 console.error("Error adding payment method:", e);
                 showModal('خطأ', 'فشل إضافة طريقة الدفع.');
             }
        }
        
        async function deletePaymentMethod(index) {
            if (userId !== adminUid) return showModal('خطأ', 'ليس لديك صلاحية.');
            const updatedMethods = siteConfig.paymentMethods.filter((_, i) => i !== index);
            const newConfig = { ...siteConfig, paymentMethods: updatedMethods };
            try {
                await setDoc(doc(db, `artifacts/${appId}/public/data/settings/siteConfig`), newConfig, { merge: true });
                showModal('تم', 'تم حذف طريقة الدفع.');
             } catch(e) {
                 console.error("Error deleting payment method:", e);
                 showModal('خطأ', 'فشل حذف طريقة الدفع.');
             }
        }

        async function saveWhatsappNumber() {
            if (userId !== adminUid) return showModal('خطأ', 'ليس لديك صلاحية.');
            const newConfig = { ...siteConfig, whatsapp: whatsappInput.value };
            try {
                await setDoc(doc(db, `artifacts/${appId}/public/data/settings/siteConfig`), newConfig, { merge: true });
                showModal('تم', 'تم حفظ رقم الواتس اب.');
             } catch(e) {
                 console.error("Error saving whatsapp:", e);
                 showModal('خطأ', 'فشل حفظ الرقم.');
             }
        }
        
        async function saveProduct(name, price, imageUrl, description) {
            if (!name || !price || !imageUrl) return showModal('خطأ', 'الرجاء إدخال اسم اللعبة والسعر ورابط الصورة.');
            try {
                await addDoc(collection(db, `artifacts/${appId}/public/data/products`), {
                    name, price: parseFloat(price), imageUrl, description
                });
                showModal('تم بنجاح', 'تم إضافة اللعبة بنجاح!');
                nameInput.value = ''; priceInput.value = ''; imageUrlInput.value = ''; descriptionInput.value = '';
            } catch (e) { console.error('Error adding product:', e); showModal('خطأ', 'فشل إضافة اللعبة.'); }
        }
        
        async function deleteProduct(id) {
            if (userId !== adminUid) return showModal('خطأ', 'ليس لديك صلاحية.');
            try {
                await deleteDoc(doc(db, `artifacts/${appId}/public/data/products`, id));
                showModal('تم الحذف', 'تم حذف اللعبة بنجاح.');
            } catch (e) { console.error('Error deleting product:', e); showModal('خطأ', 'فشل في حذف اللعبة.'); }
        }
        
        async function addToWishlist(product) {
            try {
                const q = query(collection(db, `artifacts/${appId}/users/${userId}/wishlist`), where('name', '==', product.name));
                const querySnapshot = await getDocs(q);
                if (querySnapshot.empty) {
                    await addDoc(collection(db, `artifacts/${appId}/users/${userId}/wishlist`), {
                        name: product.name, price: product.price, addedAt: new Date().toISOString()
                    });
                    showModal('تم بنجاح', 'تمت إضافة اللعبة إلى قائمة الأمنيات.');
                } else { showModal('موجود مسبقاً', 'هذه اللعبة موجودة بالفعل في قائمة الأمنيات.'); }
            } catch (e) { console.error('Error adding to wishlist:', e); showModal('خطأ', 'فشل إضافة اللعبة إلى قائمة الأمنيات.'); }
        }

        async function removeFromWishlist(id) {
            try {
                await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/wishlist`, id));
                showModal('تم الحذف', 'تمت إزالة اللعبة من قائمة الأمنيات.');
            } catch (e) { console.error('Error removing from wishlist:', e); showModal('خطأ', 'فشل إزالة اللعبة.'); }
        }

        async function addComment(productId, inputElement) {
            const text = inputElement.value.trim();
            if (!text) return showModal('خطأ', 'التعليق لا يمكن أن يكون فارغاً.');
            try {
                await addDoc(collection(db, `artifacts/${appId}/public/data/comments`), {
                    productId, text, userId: userId || 'زائر', timestamp: Timestamp.now()
                });
                inputElement.value = '';
            } catch (e) { console.error('Error adding comment:', e); showModal('خطأ', 'فشل في إضافة التعليق.'); }
        }

        // --- GEMINI API & TTS FUNCTIONS (Unchanged) ---
        async function generateDescription(gameName, descriptionInputElement) {
            if (!gameName) return showModal('خطأ', 'الرجاء إدخال اسم اللعبة أولاً.');
            const systemPrompt = "أنت كاتب محتوى إعلاني محترف للألعاب. قم بإنشاء وصف جذاب ومقنع للعبة بناءً على اسمها باللغة العربية. الوصف يجب أن يكون قصيرًا ومثيرًا للاهتمام.";
            const userQuery = `اكتب وصفًا للعبة تسمى: ${gameName}`;
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            const payload = { contents: [{ parts: [{ text: userQuery }] }], systemInstruction: { parts: [{ text: systemPrompt }] },};
            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                const result = await response.json();
                const text = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                if (text) { descriptionInputElement.value = text; } else { throw new Error('No content returned.'); }
            } catch (e) { console.error('Error generating description:', e); showModal('خطأ', 'فشل في توليد الوصف.'); }
        }
        async function generateImage(gameName, imageUrlInputElement) {
            if (!gameName) return showModal('خطأ', 'الرجاء إدخال اسم اللعبة أولاً.');
            const payload = { instances: { prompt: `Artistic, high-quality, digital art of the game ${gameName}` }, parameters: { "sampleCount": 1 } };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;
            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                const result = await response.json();
                const base64Data = result?.predictions?.[0]?.bytesBase64Encoded;
                if (base64Data) { imageUrlInputElement.value = `data:image/png;base64,${base64Data}`; } else { throw new Error('No image data returned.'); }
            } catch (e) { console.error('Error generating image:', e); showModal('خطأ', 'فشل في توليد الصورة.'); }
        }
        async function speakDescription(description) {
            if (!description) return showModal('خطأ', 'لا يوجد وصف للاستماع إليه.');
            const payload = { contents: [{ parts: [{ text: description }] }], generationConfig: { responseModalities: ["AUDIO"], speechConfig: { voiceConfig: { prebuiltVoiceConfig: { voiceName: "Rasalgethi" } } } }, model: "gemini-2.5-flash-preview-tts" };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=${apiKey}`;
            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                const result = await response.json();
                const part = result?.candidates?.[0]?.content?.parts?.[0];
                if (part?.inlineData?.data) {
                    const pcm16 = new Int16Array(base64ToArrayBuffer(part.inlineData.data));
                    const wavBlob = pcmToWav(pcm16, 24000);
                    new Audio(URL.createObjectURL(wavBlob)).play();
                } else { throw new Error('No audio data returned.'); }
            } catch (e) { console.error('Error with TTS:', e); showModal('خطأ', 'فشل في تشغيل الصوت.'); }
        }

        // --- HELPER FUNCTIONS (Unchanged) ---
        function showError(message) { errorMessage.textContent = message; errorMessage.classList.remove('hidden'); loadingIndicator.classList.add('hidden'); mainContent.classList.add('hidden'); footer.classList.add('hidden'); }
        function showModal(title, message) { const modal = document.getElementById('modal'); document.getElementById('modal-title').textContent = title; document.getElementById('modal-content').textContent = message; modal.classList.remove('hidden'); document.getElementById('modal-close-btn').onclick = () => { modal.classList.add('hidden'); }; }
        function base64ToArrayBuffer(base64) { const binaryString = atob(base64); const len = binaryString.length; const bytes = new Uint8Array(len); for (let i = 0; i < len; i++) { bytes[i] = binaryString.charCodeAt(i); } return bytes.buffer; }
        function pcmToWav(pcmData, sampleRate) { const buffer = new ArrayBuffer(44 + pcmData.length * 2); const view = new DataView(buffer); const writeString = (view, offset, string) => { for (let i = 0; i < string.length; i++) { view.setUint8(offset + i, string.charCodeAt(i)); } }; writeString(view, 0, 'RIFF'); view.setUint32(4, 36 + pcmData.length * 2, true); writeString(view, 8, 'WAVE'); writeString(view, 12, 'fmt '); view.setUint32(16, 16, true); view.setUint16(20, 1, true); view.setUint16(22, 1, true); view.setUint32(24, sampleRate, true); view.setUint32(28, sampleRate * 2, true); view.setUint16(32, 2, true); view.setUint16(34, 16, true); writeString(view, 36, 'data'); view.setUint32(40, pcmData.length * 2, true); let offset = 44; for (let i = 0; i < pcmData.length; i++) { view.setInt16(offset, pcmData[i], true); offset += 2; } return new Blob([view], { type: 'audio/wav' }); }
    </script>
</body>
</html>


